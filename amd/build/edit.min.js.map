{"version":3,"file":"edit.min.js","sources":["../src/edit.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport ModalForm from 'core_form/modalform';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport {showSuccessNotification, showErrorNotification} from 'local_wb_faq/notifications';\n\nimport {deleteEntry, toggleVisibility} from 'local_wb_faq/admin';\n\n/**\n * Gets called from mustache template.\n *\n */\nexport const init = () => {\n\n    // eslint-disable-next-line no-console\n    console.log('faq init called');\n\n    // Find all container.\n    const containers = document.querySelectorAll('.local_wb_faq_container');\n\n    containers.forEach(element => {\n        if (!element.dataset.initialized) {\n            element.addEventListener('click', editModalListener);\n            element.dataset.initialized = true;\n        } else {\n\n            // Just to make sure during development that this is not called to often.\n            // eslint-disable-next-line no-console\n            console.log('unnecessary call of init');\n        }\n    });\n};\n\n/**\n * Modal listener to open the edit Modals.\n * @param {*} event\n */\nconst editModalListener = event => {\n    // eslint-disable-next-line no-console\n    console.log('edit.js', event);\n    let button = event.target;\n\n    if (button.tagName.toLowerCase() === 'i') {\n        button = button.parentElement;\n    }\n\n    if (button.classList.contains('local_wb_faq_edit_question')) {\n        // eslint-disable-next-line no-console\n        console.log('question');\n        openEditQuestionsModal(event);\n\n    } else if (button.classList.contains('local_wb_faq_delete_question')) {\n        // eslint-disable-next-line no-console\n        console.log('delete question');\n        confirmDeleteEntry(event);\n    } else if (button.classList.contains('local_wb_faq_toggle_entry_visibility')) {\n        // eslint-disable-next-line no-console\n        console.log('toggle visibility');\n        confirmToggleVisibility(event);\n    } else if (button.classList.contains('local_wb_faq_toggle_category_visibility')) {\n        // eslint-disable-next-line no-console\n        console.log('toggle visibility');\n        confirmToggleVisibility(event);\n    } else if (button.classList.contains('local_wb_faq_edit_category')) {\n        // eslint-disable-next-line no-console\n        console.log('edit category');\n        openEditCategoriesModal(event);\n\n    } else if (button.classList.contains('local_wb_faq_delete_category')) {\n        // eslint-disable-next-line no-console\n        console.log('delete category');\n        confirmDeleteEntry(event);\n    } else if (button.classList.contains('local_wb_faq_edit_category')) {\n        // eslint-disable-next-line no-console\n        console.log('category');\n        openEditCategoriesModal(event);\n    } else {\n        // eslint-disable-next-line no-console\n        console.log('no token found');\n    }\n};\n\n/**\n * Opens the Modal to edit questions.\n * @param {*} event the click event\n */\n function openEditQuestionsModal(event) {\n\n    let button = event.target;\n    let entryid = 0;\n\n    if (button.tagName.toLowerCase() !== 'a') {\n        button = button.parentElement;\n    }\n\n    if (button.dataset.id) {\n        entryid = button.dataset.id;\n    }\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_wb_faq\\\\form\\\\editQuestionForm\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {\n            'id': entryid,\n            'type': 1,\n            'nobuttons': true\n        },\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('addquestion', 'local_wb_faq')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button\n    });\n\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        const response = e.detail;\n        // eslint-disable-next-line no-console\n        console.log('Response of the modal: ', response);\n\n        showSuccessNotification();\n        window.location.reload();\n    });\n\n    // Show the form.\n    modalForm.show().then(() => {\n\n        return;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n\n        showErrorNotification();\n    });\n}\n\n/**\n * Opens the Modal to edit questions.\n * @param {*} event the click event\n */\n function openEditCategoriesModal(event) {\n\n    let button = event.target;\n    let entryid = 0;\n\n    if (button.tagName.toLowerCase() !== 'a') {\n        button = button.parentElement;\n    }\n\n    if (button.dataset.id) {\n        entryid = button.dataset.id;\n    }\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_wb_faq\\\\form\\\\editCategoriesForm\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {\n            'id': entryid,\n            'type': 0,\n            'nobuttons': true\n        },\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('addcategory', 'local_wb_faq')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button\n    });\n\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        const response = e.detail;\n        // eslint-disable-next-line no-console\n        console.log('Response of the modal: ', response);\n\n        showSuccessNotification();\n        window.location.reload();\n    });\n\n    // Show the form.\n    modalForm.show().then(() => {\n\n        return;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n\n        showErrorNotification();\n    });\n}\n\n/**\n * @param {*} event\n */\n function confirmDeleteEntry(event) {\n\n    let button = event.target;\n    let entryid = 0;\n\n    // We assume we delete a question.\n    if (button.tagName.toLowerCase() !== 'a') {\n        button = button.parentElement;\n    }\n    // No difference at the moment between deleting question or category, but there could be.\n    if (button.classList.contains('local_wb_faq_delete_question')) {\n        if (button.dataset.id) {\n            entryid = button.dataset.id;\n        }\n    } else if (button.classList.contains('local_wb_faq_delete_category')) {\n        if (button.dataset.id) {\n            entryid = button.dataset.id;\n        }\n    } else {\n        // eslint-disable-next-line no-console\n        console.log('no delete entry to delete');\n        return;\n    }\n\n    getStrings([\n        {key: 'confirmdeleteentrytitle', component: 'local_wb_faq'},\n        {key: 'confirmdeleteentrybody', component: 'local_wb_faq'},\n        {key: 'confirmdeleteentry', component: 'local_wb_faq'}\n    ]\n    ).then(strings => {\n\n        // eslint-disable-next-line no-console\n        console.log(strings);\n\n        ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n            modal.setTitle(strings[0]);\n                modal.setBody(strings[1]);\n                modal.setSaveButtonText(strings[2]);\n                modal.getRoot().on(ModalEvents.save, function() {\n\n                    // Looking for the question.\n                    let entry = button.closest('div.accordion-item');\n                    let elementid = 0;\n\n                    // We need to be looking for the category, not a question.\n                    if (!entry) {\n                        entry = button.closest('[data-action=\"goto\"]');\n                        elementid = entry.dataset.targetid;\n                    } else {\n                        elementid = entry.dataset.id;\n                    }\n\n                    // This is to verify that we've actually found the right dom element.\n                    if (elementid == entryid) {\n                        entry.remove();\n                        // Todo: We should react only on a success response from delete.\n                        deleteEntry(entryid);\n                        showSuccessNotification();\n                    } else {\n                        // eslint-disable-next-line no-console\n                        console.log('couldnt find right element');\n                    }\n                });\n\n                modal.show();\n                return modal;\n        }).catch(e => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n\n            showErrorNotification();\n        });\n        return true;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n\n        showErrorNotification();\n    });\n}\n\n/**\n * @param {*} event\n */\n function confirmToggleVisibility(event) {\n\n    // eslint-disable-next-line no-console\n    console.log('confirmToggleVisibility', event.target);\n\n    let button = event.target;\n    let entryid = 0;\n\n    // We assume we delete a question.\n    if (button.tagName.toLowerCase() !== 'a') {\n        button = button.parentElement;\n    }\n\n    // eslint-disable-next-line no-console\n    console.log('ctv', event.target, button.tagName, button);\n\n    // No difference at the moment between deleting question or category, but there could be.\n    if (button.classList.contains('local_wb_faq_toggle_entry_visibility')) {\n        if (button.dataset.id) {\n            entryid = button.dataset.id;\n        }\n    } else if (button.classList.contains('local_wb_faq_toggle_category_visibility')) {\n        if (button.dataset.id) {\n            entryid = button.dataset.id;\n        }\n    } else {\n        // eslint-disable-next-line no-console\n        console.log('no entry to toggle');\n        return;\n    }\n\n    getStrings([\n        {key: 'confirmtogglevisibilitytitle', component: 'local_wb_faq'},\n        {key: 'confirmtogglevisibilitybody', component: 'local_wb_faq'},\n        {key: 'confirmtogglevisibility', component: 'local_wb_faq'}\n    ]\n    ).then(strings => {\n\n        ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n            modal.setTitle(strings[0]);\n                modal.setBody(strings[1]);\n                modal.setSaveButtonText(strings[2]);\n                modal.getRoot().on(ModalEvents.save, function() {\n\n                    // Looking for the question.\n                    let entry = button.closest('div.accordion-item');\n                    let elementid = 0;\n\n                    // We need to be looking for the category, not a question.\n                    if (!entry) {\n                        entry = button.closest('[data-action=\"goto\"]');\n                        elementid = entry.dataset.targetid;\n                    } else {\n                        elementid = entry.dataset.id;\n                    }\n\n                    // This is to verify that we've actually found the right dom element.\n                    if (elementid == entryid) {\n                        // Todo: We should react only on a success response from delete.\n                        toggleVisibility(entryid);\n\n                        let ielement = button.querySelector('i.toggle-visibility');\n\n                        // eslint-disable-next-line no-console\n                        console.log(ielement, button.classList);\n\n                        if (ielement) {\n                            if (ielement.classList.contains('fa-eye-slash')) {\n                                ielement.classList.replace('fa-eye-slash', 'fa-eye');\n                            } else {\n                                ielement.classList.replace('fa-eye', 'fa-eye-slash');\n                            }\n                            showSuccessNotification();\n                        } else {\n                            window.location.reload();\n                        }\n\n\n\n                    } else {\n                        // eslint-disable-next-line no-console\n                        console.log('couldnt find right element');\n                    }\n                });\n\n                modal.show();\n                return modal;\n        }).catch(e => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n\n            showErrorNotification();\n        });\n        return true;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n\n        showErrorNotification();\n    });\n}"],"names":["console","log","document","querySelectorAll","forEach","element","dataset","initialized","addEventListener","editModalListener","event","button","target","tagName","toLowerCase","parentElement","classList","contains","entryid","id","modalForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","e","response","detail","window","location","reload","show","then","catch","openEditQuestionsModal","confirmDeleteEntry","confirmToggleVisibility","openEditCategoriesModal","key","component","strings","create","type","ModalFactory","types","SAVE_CANCEL","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","entry","closest","elementid","targetid","remove","ielement","querySelector","replace"],"mappings":"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"}