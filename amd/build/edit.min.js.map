{"version":3,"file":"edit.min.js","sources":["../src/edit.js"],"sourcesContent":["\r\n// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/*\r\n * @package    local_wunderbyte_table\r\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n\r\nimport ModalForm from 'core_form/modalform';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport ModalEvents from 'core/modal_events';\r\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\r\nimport {showSuccessNotification, showErrorNotification} from 'local_wb_faq/notifications';\r\n\r\nimport {deleteEntry} from 'local_wb_faq/admin';\r\n\r\n/**\r\n * Gets called from mustache template.\r\n *\r\n */\r\nexport const init = () => {\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.log('faq init called');\r\n\r\n    // Find all container.\r\n    const containers = document.querySelectorAll('.local_wb_faq_container');\r\n\r\n    containers.forEach(element => {\r\n        if (!element.dataset.initialized) {\r\n            element.addEventListener('click', editModalListener);\r\n            element.dataset.initialized = true;\r\n        } else {\r\n\r\n            // Just to make sure during development that this is not called to often.\r\n\r\n            // eslint-disable-next-line no-console\r\n            console.log('unnecessary call of init');\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Modal listener to open the edit Modals.\r\n * @param {*} event\r\n */\r\nconst editModalListener = event => {\r\n    // eslint-disable-next-line no-console\r\n    console.log('edit.js', event);\r\n    let button = event.target;\r\n    let entryid = null;\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.log('edit.js', button.tagName);\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.log(button);\r\n    if (button.tagName.toLowerCase() === 'i') {\r\n        button = button.parentElement;\r\n    }\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.log(button.classList, entryid);\r\n\r\n    if (button.classList.contains('local_wb_faq_edit_question')) {\r\n        // eslint-disable-next-line no-console\r\n        console.log('question');\r\n        openEditQuestionsModal(event);\r\n\r\n    } else if (button.classList.contains('local_wb_faq_delete_question')) {\r\n        // eslint-disable-next-line no-console\r\n        console.log('delete question');\r\n        confirmDeleteEntry(event);\r\n    } else if (button.classList.contains('local_wb_faq_edit_category')) {\r\n        // eslint-disable-next-line no-console\r\n        console.log('edit category');\r\n        openEditCategoriesModal(event);\r\n\r\n    } else if (button.classList.contains('local_wb_faq_delete_category')) {\r\n        // eslint-disable-next-line no-console\r\n        console.log('delete category');\r\n        confirmDeleteEntry(event);\r\n    } else if (button.classList.contains('local_wb_faq_edit_category')) {\r\n        // eslint-disable-next-line no-console\r\n        console.log('category');\r\n        openEditCategoriesModal(event);\r\n    } else {\r\n        // eslint-disable-next-line no-console\r\n        console.log('no token found');\r\n    }\r\n};\r\n\r\n/**\r\n * Opens the Modal to edit questions.\r\n * @param {*} event the click event\r\n */\r\n function openEditQuestionsModal(event) {\r\n\r\n    let button = event.target;\r\n    let entryid = 0;\r\n\r\n    if (button.tagName.toLowerCase() !== 'a') {\r\n        button = button.parentElement;\r\n    }\r\n\r\n    if (button.dataset.id) {\r\n        entryid = button.dataset.id;\r\n    }\r\n\r\n    const modalForm = new ModalForm({\r\n\r\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\r\n        formClass: \"local_wb_faq\\\\form\\\\editQuestionForm\",\r\n        // Add as many arguments as you need, they will be passed to the form:\r\n        args: {\r\n            'id': entryid,\r\n            'type': 1\r\n        },\r\n        // Pass any configuration settings to the modal dialogue, for example, the title:\r\n        modalConfig: {title: getString('addquestion', 'local_wb_faq')},\r\n        // DOM element that should get the focus after the modal dialogue is closed:\r\n        returnFocus: button\r\n    });\r\n\r\n    // Listen to events if you want to execute something on form submit.\r\n    // Event detail will contain everything the process() function returned:\r\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\r\n        const response = e.detail;\r\n        // eslint-disable-next-line no-console\r\n        console.log('Response of the modal: ', response);\r\n\r\n        showSuccessNotification();\r\n        window.location.reload();\r\n    });\r\n\r\n    // Show the form.\r\n    modalForm.show().then(() => {\r\n\r\n        return;\r\n    }).catch(e => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(e);\r\n\r\n        showErrorNotification();\r\n    });\r\n}\r\n\r\n/**\r\n * Opens the Modal to edit questions.\r\n * @param {*} event the click event\r\n */\r\n function openEditCategoriesModal(event) {\r\n\r\n    let button = event.target;\r\n    let entryid = 0;\r\n\r\n    if (button.tagName.toLowerCase() !== 'a') {\r\n        button = button.parentElement;\r\n    }\r\n\r\n    if (button.dataset.id) {\r\n        entryid = button.dataset.id;\r\n    }\r\n\r\n    const modalForm = new ModalForm({\r\n\r\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\r\n        formClass: \"local_wb_faq\\\\form\\\\editCategoriesForm\",\r\n        // Add as many arguments as you need, they will be passed to the form:\r\n        args: {\r\n            'id': entryid,\r\n            'type': 0\r\n        },\r\n        // Pass any configuration settings to the modal dialogue, for example, the title:\r\n        modalConfig: {title: getString('addcategory', 'local_wb_faq')},\r\n        // DOM element that should get the focus after the modal dialogue is closed:\r\n        returnFocus: button\r\n    });\r\n\r\n    // Listen to events if you want to execute something on form submit.\r\n    // Event detail will contain everything the process() function returned:\r\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\r\n        const response = e.detail;\r\n        // eslint-disable-next-line no-console\r\n        console.log('Response of the modal: ', response);\r\n\r\n        showSuccessNotification();\r\n        window.location.reload();\r\n    });\r\n\r\n    // Show the form.\r\n    modalForm.show().then(() => {\r\n\r\n        return;\r\n    }).catch(e => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(e);\r\n\r\n        showErrorNotification();\r\n    });\r\n}\r\n\r\n/**\r\n * @param {*} event\r\n */\r\n function confirmDeleteEntry(event) {\r\n\r\n    let button = event.target;\r\n    let entryid = 0;\r\n\r\n    // We assume we delete a question.\r\n    if (button.tagName.toLowerCase() !== 'a') {\r\n        button = button.parentElement;\r\n    }\r\n    // No difference at the moment between deleting question or category, but there could be.\r\n    if (button.classList.contains('local_wb_faq_delete_question')) {\r\n        if (button.dataset.id) {\r\n            entryid = button.dataset.id;\r\n        }\r\n    } else if (button.classList.contains('local_wb_faq_delete_category')) {\r\n        if (button.dataset.id) {\r\n            entryid = button.dataset.id;\r\n        }\r\n    } else {\r\n        // eslint-disable-next-line no-console\r\n        console.log('no delete entry to delete');\r\n        return;\r\n    }\r\n\r\n    getStrings([\r\n        {key: 'confirmdeleteentrytitle', component: 'local_wb_faq'},\r\n        {key: 'confirmdeleteentrybody', component: 'local_wb_faq'},\r\n        {key: 'confirmdeleteentry', component: 'local_wb_faq'}\r\n    ]\r\n    ).then(strings => {\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.log(strings);\r\n\r\n        ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\r\n\r\n            modal.setTitle(strings[0]);\r\n                modal.setBody(strings[1]);\r\n                modal.setSaveButtonText(strings[2]);\r\n                modal.getRoot().on(ModalEvents.save, function() {\r\n\r\n                    // Looking for the question.\r\n                    let entry = button.closest('div.accordion-item');\r\n                    let elementid = 0;\r\n\r\n                    // We need to be looking for the category, not a question.\r\n                    if (!entry) {\r\n                        entry = button.closest('[data-action=\"goto\"]');\r\n                        elementid = entry.dataset.targetid;\r\n                    } else {\r\n                        elementid = entry.dataset.id;\r\n                    }\r\n\r\n                    // This is to verify that we've actually found the right dom element.\r\n                    if (elementid == entryid) {\r\n                        entry.remove();\r\n                        // Todo: We should react only on a success response from delete.\r\n                        deleteEntry(entryid);\r\n                        showSuccessNotification();\r\n                    } else {\r\n                        // eslint-disable-next-line no-console\r\n                        console.log('couldnt find right element');\r\n                    }\r\n                });\r\n\r\n                modal.show();\r\n                return modal;\r\n        }).catch(e => {\r\n            // eslint-disable-next-line no-console\r\n            console.log(e);\r\n\r\n            showErrorNotification();\r\n        });\r\n        return true;\r\n    }).catch(e => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(e);\r\n\r\n        showErrorNotification();\r\n    });\r\n}\r\n"],"names":["console","log","document","querySelectorAll","forEach","element","dataset","initialized","addEventListener","editModalListener","event","button","target","tagName","toLowerCase","parentElement","classList","contains","entryid","id","modalForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","e","response","detail","window","location","reload","show","then","catch","openEditQuestionsModal","confirmDeleteEntry","openEditCategoriesModal","key","component","strings","create","type","ModalFactory","types","SAVE_CANCEL","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","entry","closest","elementid","targetid","remove"],"mappings":"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"}